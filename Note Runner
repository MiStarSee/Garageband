<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Staff Wars - Note Identification Game</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #1a202c; /* Equivalent to Tailwind's gray-800 */
        }
        .game-container {
            width: 100%;
            max-width: 1000px;
            margin: auto;
            background-color: #2d3748; /* gray-700 */
            border-radius: 1rem;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        .btn {
            transition: all 0.2s ease-in-out;
        }
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        .btn-option.selected {
            background-color: #4299e1; /* blue-500 */
            color: white;
            border-color: #4299e1; /* blue-500 */
        }
        .note-button {
            width: 50px;
            height: 50px;
            font-weight: 700;
            font-size: 1.25rem;
        }
        canvas {
            background-color: #f7fafc; /* gray-100 */
            border-radius: 0.5rem;
        }
        #game-over-screen {
            background-color: rgba(45, 55, 72, 0.9);
        }
    </style>
</head>
<body class="text-white flex items-center justify-center min-h-screen p-4">

    <div class="game-container p-6">

        <!-- Settings Screen -->
        <div id="settings-screen">
            <h1 class="text-4xl font-bold text-center mb-6">Staff Wars</h1>
            <p class="text-center text-gray-300 mb-8">Configure your game and start practicing!</p>

            <!-- Difficulty -->
            <div class="mb-6">
                <h2 class="text-xl font-semibold mb-3">Difficulty</h2>
                <div id="difficulty-options" class="grid grid-cols-3 gap-4">
                    <button data-value="easy" class="btn btn-option p-4 bg-gray-600 rounded-lg border-2 border-transparent">Easy</button>
                    <button data-value="medium" class="btn btn-option p-4 bg-gray-600 rounded-lg border-2 border-transparent">Medium</button>
                    <button data-value="hard" class="btn btn-option p-4 bg-gray-600 rounded-lg border-2 border-transparent">Hard</button>
                </div>
            </div>

            <!-- Clef -->
            <div class="mb-8">
                <h2 class="text-xl font-semibold mb-3">Clef</h2>
                <div id="clef-options" class="grid grid-cols-2 gap-4">
                    <button data-value="treble" class="btn btn-option p-4 bg-gray-600 rounded-lg border-2 border-transparent">Treble</button>
                    <button data-value="bass" class="btn btn-option p-4 bg-gray-600 rounded-lg border-2 border-transparent">Bass</button>
                </div>
            </div>

            <button id="start-game-btn" class="btn w-full bg-green-600 hover:bg-green-700 text-white font-bold py-4 px-4 rounded-lg text-xl">
                Start Game
            </button>
        </div>

        <!-- Game Screen -->
        <div id="game-screen" class="hidden">
            <div class="flex justify-between items-center mb-4 text-2xl font-bold">
                <div>Score: <span id="score">0</span></div>
                <div>Level: <span id="level">1</span></div>
                <div>Health: <span id="health">5</span></div>
            </div>
            <canvas id="staff-canvas" width="952" height="400"></canvas>
            <div class="mt-4 flex justify-center gap-2 flex-wrap">
                <button data-note="A" class="btn note-button bg-red-500 rounded-full">A</button>
                <button data-note="B" class="btn note-button bg-orange-500 rounded-full">B</button>
                <button data-note="C" class="btn note-button bg-yellow-500 text-black rounded-full">C</button>
                <button data-note="D" class="btn note-button bg-green-500 rounded-full">D</button>
                <button data-note="E" class="btn note-button bg-blue-500 rounded-full">E</button>
                <button data-note="F" class="btn note-button bg-indigo-500 rounded-full">F</button>
                <button data-note="G" class="btn note-button bg-purple-500 rounded-full">G</button>
            </div>
        </div>

        <!-- Game Over Screen -->
        <div id="game-over-screen" class="hidden absolute inset-0 bg-gray-800 bg-opacity-90 flex flex-col justify-center items-center">
            <h2 class="text-5xl font-bold mb-4">Game Over</h2>
            <p class="text-2xl mb-2">Final Score: <span id="final-score">0</span></p>
            <p class="text-2xl mb-8">Level Reached: <span id="final-level">1</span></p>
            <button id="play-again-btn" class="btn bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg text-lg">
                Play Again
            </button>
        </div>

    </div>

    <script>
    // --- DOM ELEMENTS ---
    const settingsScreen = document.getElementById('settings-screen');
    const gameScreen = document.getElementById('game-screen');
    const gameOverScreen = document.getElementById('game-over-screen');
    const startGameBtn = document.getElementById('start-game-btn');
    const playAgainBtn = document.getElementById('play-again-btn');
    const canvas = document.getElementById('staff-canvas');
    const ctx = canvas.getContext('2d');

    // --- GAME STATE & SETTINGS ---
    let score, level, health, gameSettings, notesOnScreen, gameLoopId, noteSpawnInterval;
    let gameIsOver = true;

    // --- NOTE DATA ---
    // Maps note name to its position as steps from a reference point.
    // A "step" is half a line space. 0 is the bottom line of the staff.
    const notePositions = {
        // Bass Clef (G2 is bottom line)
        'G2': 0, 'A2': 1, 'B2': 2, 'C3': 3, 'D3': 4, 'E3': 5, 'F3': 6, 'G3': 7, 'A3': 8, 'B3': 9,
        // Treble Clef (E4 is bottom line)
        'C4': -2, 'D4': -1, 'E4': 0, 'F4': 1, 'G4': 2, 'A4': 3, 'B4': 4,
    };
    const allNotes = ['G2', 'A2', 'B2', 'C3','D3','E3','F3','G3','A3','B3', 'C4','D4','E4','F4','G4','A4','B4'];


    // --- EVENT LISTENERS ---
    document.addEventListener('DOMContentLoaded', init);

    function init() {
        setupOptionSelectors();
        startGameBtn.addEventListener('click', startGame);
        playAgainBtn.addEventListener('click', () => {
            gameOverScreen.classList.add('hidden');
            settingsScreen.classList.remove('hidden');
        });
        document.querySelector('.note-button[data-note]').parentElement.addEventListener('click', handleNoteButtonClick);
        window.addEventListener('keydown', handleKeyPress);
    }

    function setupOptionSelectors() {
        const optionContainers = [
            document.getElementById('difficulty-options'),
            document.getElementById('clef-options'),
        ];
        optionContainers.forEach(container => {
            container.addEventListener('click', (e) => {
                if (e.target.tagName === 'BUTTON') {
                    [...container.children].forEach(child => child.classList.remove('selected'));
                    e.target.classList.add('selected');
                }
            });
            // Set default selection
            container.children[0].classList.add('selected');
        });
    }

    // --- GAME START & SETUP ---
    function startGame() {
        // 1. Read settings
        gameSettings = {
            difficulty: document.querySelector('#difficulty-options .selected').dataset.value,
            clef: document.querySelector('#clef-options .selected').dataset.value,
        };

        // 2. Reset game state
        score = 0;
        level = 1;
        notesOnScreen = [];
        gameIsOver = false;

        // 3. Set health based on difficulty
        if (gameSettings.difficulty === 'easy') {
            health = 5;
        } else {
            health = 3;
        }

        // 4. Update UI
        updateHUD();
        settingsScreen.classList.add('hidden');
        gameScreen.classList.remove('hidden');

        // 5. Start game processes
        gameLoopId = requestAnimationFrame(gameLoop);
        manageNoteSpawning();
    }

    // --- GAME LOOP ---
    function gameLoop() {
        if (gameIsOver) return;

        // Clear canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        // Draw elements
        drawStaff();
        drawNotes();

        // Update elements
        moveNotes();
        checkNotes();

        gameLoopId = requestAnimationFrame(gameLoop);
    }

    // --- DRAWING FUNCTIONS ---
    function drawStaff() {
        const staffHeight = 10; // distance between lines
        const staffWidth = canvas.width - 40;
        const staffX = 20;
        const staffCenterY = canvas.height / 2;

        const drawSingleStaff = (y_center) => {
            ctx.fillStyle = '#4a5568'; // gray-600
            for (let i = -2; i <= 2; i++) {
                ctx.fillRect(staffX, y_center + i * staffHeight, staffWidth, 2);
            }
        };

        const drawClef = (clefChar, x, y) => {
            ctx.fillStyle = '#1a202c'; // gray-800
            ctx.font = '90px serif'; // A large serif font for the clef symbols
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(clefChar, x, y);
        };

        drawSingleStaff(staffCenterY);
        if (gameSettings.clef === 'treble') {
            drawClef('ùÑû', 45, staffCenterY); // Unicode for G-clef (Treble)
        } else if (gameSettings.clef === 'bass') {
            drawClef('ùÑ¢', 45, staffCenterY); // Unicode for F-clef (Bass)
        }
    }

    function drawNotes() {
        notesOnScreen.forEach(note => {
            ctx.fillStyle = '#1a202c'; // gray-800
            ctx.beginPath();
            ctx.ellipse(note.x, note.y, 10, 7, 0, 0, 2 * Math.PI);
            ctx.fill();

            // Draw leger lines if necessary
            const staffInfo = getStaffInfoForNote(note.name);
            if (!staffInfo) return;
            const { staffCenterY, lineSpacing } = staffInfo;
            const topStaffLineY = staffCenterY - 2 * lineSpacing;
            const bottomStaffLineY = staffCenterY + 2 * lineSpacing;

            if (note.y < topStaffLineY - lineSpacing/2) { // Above staff
                for (let y = topStaffLineY - lineSpacing; y >= note.y; y -= lineSpacing) {
                    ctx.fillRect(note.x - 15, y, 30, 2);
                }
            }
            if (note.y > bottomStaffLineY + lineSpacing/2) { // Below staff
                 for (let y = bottomStaffLineY + lineSpacing; y <= note.y; y += lineSpacing) {
                    ctx.fillRect(note.x - 15, y, 30, 2);
                }
            }
        });
    }

    // --- NOTE MANAGEMENT ---
    function manageNoteSpawning() {
        clearInterval(noteSpawnInterval);
        const spawn = () => {
            if (gameSettings.difficulty === 'easy' && notesOnScreen.length < 1) {
                spawnNote();
            } else if (gameSettings.difficulty === 'medium' && level < 5 && notesOnScreen.length < 1) {
                spawnNote();
            } else if (gameSettings.difficulty === 'medium' && level >= 5 && notesOnScreen.length < 2) {
                spawnNote();
            }
        };

        if (gameSettings.difficulty === 'hard') {
            noteSpawnInterval = setInterval(spawnNote, 2000); // Continuous scroll
        } else {
            spawn(); // Initial spawn for easy/medium
        }
    }

    function spawnNote() {
        const noteName = getRandomNote();
        const staffInfo = getStaffInfoForNote(noteName);
        if (!staffInfo) return; 

        const note = {
            name: noteName,
            x: canvas.width,
            y: staffInfo.yPos,
            speed: calculateNoteSpeed()
        };
        notesOnScreen.push(note);
    }

    function moveNotes() {
        notesOnScreen.forEach(note => {
            note.x -= note.speed;
        });
    }

    function checkNotes() {
        const notesToRemove = [];
        notesOnScreen.forEach((note, index) => {
            if (note.x < 80) { // Increased clef area to prevent notes from hitting it
                notesToRemove.push(index);
                loseHealth();
            }
        });

        for (let i = notesToRemove.length - 1; i >= 0; i--) {
            notesOnScreen.splice(notesToRemove[i], 1);
        }
        
        if (notesToRemove.length > 0 && gameSettings.difficulty !== 'hard') {
            manageNoteSpawning();
        }
    }

    // --- PLAYER INPUT ---
    function handleNoteButtonClick(e) {
        if (e.target.matches('.note-button')) {
            const noteName = e.target.dataset.note;
            checkAnswer(noteName);
        }
    }

    function handleKeyPress(e) {
        const key = e.key.toUpperCase();
        if (['A', 'B', 'C', 'D', 'E', 'F', 'G'].includes(key)) {
            checkAnswer(key);
        }
    }

    function checkAnswer(guess) {
        if (gameIsOver || notesOnScreen.length === 0) return;

        const targetNote = notesOnScreen[0];
        if (guess === targetNote.name.charAt(0)) {
            score++;
            notesOnScreen.shift(); 
            checkForLevelUp();
            updateHUD();
            if (gameSettings.difficulty !== 'hard') {
                manageNoteSpawning();
            }
        } else {
            loseHealth();
        }
    }

    // --- GAME LOGIC & RULES ---
    function loseHealth() {
        if (gameIsOver) return;
        health--;
        updateHUD();
        if (health <= 0) {
            endGame();
        }
    }

    function checkForLevelUp() {
        if (score > 0 && score % 10 === 0) {
            level++;
            const newSpeed = calculateNoteSpeed();
            notesOnScreen.forEach(note => note.speed = newSpeed);

            if (level % 5 === 0) {
                score += 5;
            }
            if (level % 10 === 0) {
                health++;
            }
            
            if(gameSettings.difficulty === 'medium' && level >= 5) {
                manageNoteSpawning();
            }
        }
    }

    function endGame() {
        gameIsOver = true;
        cancelAnimationFrame(gameLoopId);
        clearInterval(noteSpawnInterval);

        document.getElementById('final-score').textContent = score;
        document.getElementById('final-level').textContent = level;

        gameScreen.classList.add('hidden');
        gameOverScreen.classList.remove('hidden');
    }

    // --- UTILITY & HELPER FUNCTIONS ---
    function updateHUD() {
        document.getElementById('score').textContent = score;
        document.getElementById('level').textContent = level;
        document.getElementById('health').textContent = health;
    }

    function calculateNoteSpeed() {
        const baseTime = 10; 
        const timeReduction = 0.1; 
        const timeForLevel = baseTime * (1 - (level - 1) * timeReduction);
        const effectiveTime = Math.max(timeForLevel, 1.5); 
        return (canvas.width - 80) / (effectiveTime * 60); 
    }

    function getStaffInfoForNote(noteName) {
        const lineSpacing = 10;
        const position = notePositions[noteName];
        if (position === undefined) return null;

        const staffCenterY = canvas.height / 2;
        const bottomLineY = staffCenterY + 2 * lineSpacing;
        
        const yPos = bottomLineY - position * (lineSpacing / 2);

        return {
            staffCenterY: staffCenterY,
            lineSpacing: lineSpacing,
            yPos: yPos
        };
    }

    function getNoteRange() {
        const { clef } = gameSettings;
        let start, end;

        if (clef === 'treble') {
            start = 'C4'; end = 'B4';
        } else { // Bass
            start = 'C3'; end = 'B3';
        }
        
        const startIndex = allNotes.indexOf(start);
        const endIndex = allNotes.indexOf(end);
        return allNotes.slice(startIndex, endIndex + 1);
    }

    function getRandomNote() {
        const availableNotes = getNoteRange();
        if (availableNotes.length === 0) return 'C4'; // Fallback
        return availableNotes[Math.floor(Math.random() * availableNotes.length)];
    }

    </script>
</body>
</html>
